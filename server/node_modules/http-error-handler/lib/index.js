"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log = require("fancy-log");
exports.badRequest = {
    code: 400,
    error: 'Bad Request',
    reason: 'badRequest',
    message: 'The request is invalid',
    details: [],
};
exports.invalidParameter = {
    code: 400,
    error: 'Bad Request',
    reason: 'invalidParameter',
    message: 'The value for one of the URL parameters was invalid',
    details: [],
};
exports.parseError = {
    code: 400,
    error: 'Bad Request',
    reason: 'parseError',
    message: 'Could not parse the body of the request according to the provided Content-Type',
    details: [],
};
exports.requiredParameter = {
    code: 400,
    error: 'Bad Request',
    reason: 'requiredParameter',
    message: 'A required URL parameter or required request body JSON property is missing',
    details: [],
};
exports.authError = {
    code: 401,
    error: 'Unauthorized',
    reason: 'authError',
    message: 'The authorization provided in the request is invalid',
    details: [],
};
exports.requiredAuthorisation = {
    code: 401,
    error: 'Unauthorized',
    reason: 'requiredAuthorisation',
    message: 'The request requires authorization, but none was provided',
    details: [],
};
exports.forbidden = {
    code: 403,
    error: 'Forbidden',
    reason: 'forbidden',
    message: 'The user does not have access to perform the request',
    details: [],
};
exports.rateLimitExceeded = {
    code: 403,
    error: 'Forbidden',
    reason: 'rateLimitExceeded',
    message: 'The rate limit was exceeded. Retry using exponential backoff',
    details: [],
};
exports.sslRequired = {
    code: 403,
    error: 'Forbidden',
    reason: 'sslRequired',
    message: 'Requests to this API require SSL',
    details: [],
};
exports.notFound = {
    code: 404,
    error: 'Not Found',
    reason: 'notFound',
    message: 'The resource could not be found',
};
exports.internalError = {
    code: 500,
    error: 'Internal Server Error',
    reason: 'internalError',
    message: 'The request failed due to an internal error. Try again using truncated exponential backoff.',
};
exports.backendError = {
    code: 503,
    error: 'Service Unavailable',
    reason: 'backendError',
    message: 'The service needed to fullfill the request is unavailable. Try again using truncated exponential backoff',
};
exports.errorHandler = (err, req, res, next) => {
    if (next && res.headersSent) {
        return next(err);
    }
    if (err.error && err.error.code) {
        err = err.error;
    }
    else if (err.array) {
        err = Object.assign({}, exports.badRequest, { details: err.useFirstErrorOnly().array() });
    }
    else if (!err.code) {
        log.error(err);
        err = exports.internalError;
    }
    return res.status(err.code).json(err);
};
exports.errorHandlerCallback = (req, res, next) => {
    return ((err) => {
        return exports.errorHandler(err, req, res, next);
    });
};
exports.notFoundHandler = (req, res) => res.status(exports.notFound.code).json(exports.notFound);
